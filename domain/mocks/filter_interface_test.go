// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// FilterInterface is an autogenerated mock type for the FilterInterface type
type FilterInterface struct {
	mock.Mock
}

type FilterInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *FilterInterface) EXPECT() *FilterInterface_Expecter {
	return &FilterInterface_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields:
func (_m *FilterInterface) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FilterInterface_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type FilterInterface_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *FilterInterface_Expecter) Name() *FilterInterface_Name_Call {
	return &FilterInterface_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *FilterInterface_Name_Call) Run(run func()) *FilterInterface_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FilterInterface_Name_Call) Return(_a0 string) *FilterInterface_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FilterInterface_Name_Call) RunAndReturn(run func() string) *FilterInterface_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Operation provides a mock function with given fields:
func (_m *FilterInterface) Operation() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Operation")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FilterInterface_Operation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Operation'
type FilterInterface_Operation_Call struct {
	*mock.Call
}

// Operation is a helper method to define mock.On call
func (_e *FilterInterface_Expecter) Operation() *FilterInterface_Operation_Call {
	return &FilterInterface_Operation_Call{Call: _e.mock.On("Operation")}
}

func (_c *FilterInterface_Operation_Call) Run(run func()) *FilterInterface_Operation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FilterInterface_Operation_Call) Return(_a0 string) *FilterInterface_Operation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FilterInterface_Operation_Call) RunAndReturn(run func() string) *FilterInterface_Operation_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function with given fields:
func (_m *FilterInterface) Value() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// FilterInterface_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type FilterInterface_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *FilterInterface_Expecter) Value() *FilterInterface_Value_Call {
	return &FilterInterface_Value_Call{Call: _e.mock.On("Value")}
}

func (_c *FilterInterface_Value_Call) Run(run func()) *FilterInterface_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FilterInterface_Value_Call) Return(_a0 interface{}) *FilterInterface_Value_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FilterInterface_Value_Call) RunAndReturn(run func() interface{}) *FilterInterface_Value_Call {
	_c.Call.Return(run)
	return _c
}

// NewFilterInterface creates a new instance of FilterInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFilterInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *FilterInterface {
	mock := &FilterInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
