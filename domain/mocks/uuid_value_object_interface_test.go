// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// UUIDValueObjectInterface is an autogenerated mock type for the UUIDValueObjectInterface type
type UUIDValueObjectInterface struct {
	mock.Mock
}

type UUIDValueObjectInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UUIDValueObjectInterface) EXPECT() *UUIDValueObjectInterface_Expecter {
	return &UUIDValueObjectInterface_Expecter{mock: &_m.Mock}
}

// String provides a mock function with given fields:
func (_m *UUIDValueObjectInterface) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UUIDValueObjectInterface_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type UUIDValueObjectInterface_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *UUIDValueObjectInterface_Expecter) String() *UUIDValueObjectInterface_String_Call {
	return &UUIDValueObjectInterface_String_Call{Call: _e.mock.On("String")}
}

func (_c *UUIDValueObjectInterface_String_Call) Run(run func()) *UUIDValueObjectInterface_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UUIDValueObjectInterface_String_Call) Return(_a0 string) *UUIDValueObjectInterface_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UUIDValueObjectInterface_String_Call) RunAndReturn(run func() string) *UUIDValueObjectInterface_String_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function with given fields:
func (_m *UUIDValueObjectInterface) Value() uuid.UUID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// UUIDValueObjectInterface_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type UUIDValueObjectInterface_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *UUIDValueObjectInterface_Expecter) Value() *UUIDValueObjectInterface_Value_Call {
	return &UUIDValueObjectInterface_Value_Call{Call: _e.mock.On("Value")}
}

func (_c *UUIDValueObjectInterface_Value_Call) Run(run func()) *UUIDValueObjectInterface_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UUIDValueObjectInterface_Value_Call) Return(_a0 uuid.UUID) *UUIDValueObjectInterface_Value_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UUIDValueObjectInterface_Value_Call) RunAndReturn(run func() uuid.UUID) *UUIDValueObjectInterface_Value_Call {
	_c.Call.Return(run)
	return _c
}

// NewUUIDValueObjectInterface creates a new instance of UUIDValueObjectInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUUIDValueObjectInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UUIDValueObjectInterface {
	mock := &UUIDValueObjectInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
